{"version":3,"file":"static/js/646.bdeebbea.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/EyeBtn/EyeBtn.styled.jsx","components/EyeBtn/EyeBtn.jsx","helpers/notiflix/notiflix.js","components/Forms/GeneralForm.jsx","components/Forms/GeneralForm.styled.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","helpers/schemas/Schemas.jsx","components/Forms/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding-left: 16px;\n  padding-right: 16px;\n  margin: 0 auto;\n  height: 100vh;\n\n  @media screen and (min-width: 768px) {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    padding-left: 40px;\n    padding-right: 40px;\n  }\n`;\n\nexport const MainContentWrap = styled.div`\n  height: auto;\n  padding-top: 50px;\n  padding-bottom: 50px;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 80px;\n    padding-bottom: 80px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    padding-top: 100px;\n    padding-bottom: 100px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const EyeBtn = styled.button`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  bottom: 8px;\n  right: 10px;\n  opacity: 0.4;\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n`;\n","import { BsEye, BsEyeSlash } from 'react-icons/bs';\n\nimport { EyeBtn } from 'components/EyeBtn/EyeBtn.styled';\n\nexport const EyeButton = ({ isShowedPassword, onClick }) => {\n  return (\n    <EyeBtn type=\"button\" onClick={onClick}>\n      {isShowedPassword ? (\n        <BsEyeSlash style={{ fill: '#c0bfbf' }} size={20} />\n      ) : (\n        <BsEye style={{ fill: '#c0bfbf' }} size={20} />\n      )}\n    </EyeBtn>\n  );\n};\n","import Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  width: '260px',\n  position: 'center-top',\n  borderRadius: '8px',\n  fontSize: '14px',\n  fontFamily: 'Montserrat',\n  fontAwesomeIconSize: '30px',\n  success: {\n    background: '#7be8ea',\n    textColor: '#1a1a1a',\n  },\n  warning: {\n    background: '#7be8ea',\n    textColor: '#1a1a1a',\n  },\n});\n","import { ErrorMessage, Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport Notiflix from 'notiflix';\n\nimport { Container } from 'components/App/App.styled';\nimport { EyeButton } from 'components/EyeBtn/EyeBtn';\n\nimport { loginUser, registerUser } from '../../redux/auth/operations';\n\nimport { LoginSchema, RegisterSchema } from '../../helpers/schemas/Schemas';\nimport '../../helpers/notiflix/notiflix';\n\nimport {\n  ContentWrap,\n  FormBtn,\n  FormTitle,\n  FormWrap,\n  Input,\n  InputLabel,\n  InputWrap,\n} from './GeneralForm.styled';\n\nexport const GeneralForm = ({\n  type,\n  initialValuesLogin,\n  initialValuesRegister,\n}) => {\n  const [isShowedPassword, setIsShowedPassword] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e, { resetForm }) => {\n    if (type === 'registration') {\n      Notiflix.Notify.success('Thank you for registration! ');\n\n      dispatch(registerUser(e));\n    }\n\n    if (type === 'login') {\n      dispatch(loginUser(e));\n    }\n\n    resetForm();\n  };\n\n  const toggleShowPassword = () => {\n    setIsShowedPassword(!isShowedPassword);\n  };\n\n  return (\n    <Container>\n      <ContentWrap>\n        <FormTitle>{type === 'login' ? 'Log In' : 'Sing up'}</FormTitle>\n\n        <Formik\n          initialValues={\n            type === 'registration' ? initialValuesRegister : initialValuesLogin\n          }\n          validationSchema={\n            type === 'registration' ? RegisterSchema : LoginSchema\n          }\n          onSubmit={handleSubmit}\n        >\n          <FormWrap>\n            {type === 'registration' && (\n              <InputWrap>\n                <InputLabel htmlFor=\"user-name\">Name</InputLabel>\n                <Input id=\"user-name\" name=\"name\" placeholder=\"Kate\" />\n\n                <ErrorMessage component=\"div\" name=\"name\" />\n              </InputWrap>\n            )}\n\n            <InputWrap>\n              <InputLabel htmlFor=\"user-email\">Email</InputLabel>\n              <Input\n                id=\"user-email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"kate@test.com\"\n              />\n\n              <ErrorMessage component=\"div\" name=\"email\" />\n            </InputWrap>\n\n            <InputWrap>\n              <InputLabel htmlFor=\"user-password\">Password</InputLabel>\n              <Input\n                id=\"user-password\"\n                name=\"password\"\n                type={isShowedPassword ? 'text' : 'password'}\n                placeholder=\"********\"\n              />\n\n              <EyeButton\n                isShowedPassword={isShowedPassword}\n                onClick={toggleShowPassword}\n              />\n\n              <ErrorMessage component=\"div\" name=\"password\" />\n            </InputWrap>\n\n            <FormBtn type=\"submit\">Sign up</FormBtn>\n          </FormWrap>\n        </Formik>\n      </ContentWrap>\n    </Container>\n  );\n};\n","import { Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const ContentWrap = styled.div`\n  position: relative;\n  top: 120px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport const FormWrap = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 272px;\n\n  @media screen and (min-width: 375px) {\n    width: 328px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 440px;\n  }\n`;\n\nexport const InputWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-bottom: 16px;\n  position: relative;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  > div {\n    position: absolute;\n    bottom: -16px;\n    left: 4px;\n    font-size: 10px;\n    color: #a40000;\n  }\n`;\n\nexport const InputLabel = styled.label`\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding: 10px;\n  background-color: transparent;\n  border: 1px solid #757473;\n  border-radius: 10px;\n  color: #c0bfbf;\n  opacity: 0.4;\n\n  &:hover,\n  &:focus {\n    border-color: #7be8ea;\n    opacity: 1;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  min-width: 100px;\n  margin: 0 auto;\n  margin-top: 9px;\n  padding: 10px;\n  border-radius: 10px;\n  border: 1px solid #757473;\n  font-size: 14px;\n\n  &:hover,\n  &:focus {\n    border-color: #7be8ea;\n    color: #7be8ea;\n  }\n`;\n\nexport const FormTitle = styled.h3`\n  font-size: 20px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 24px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderContainer>\n      <ThreeDots color=\"#7be8ea;\" />\n    </LoaderContainer>\n  );\n};\n","import * as Yup from 'yup';\n\nexport const RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'too short!')\n    .max(70, 'too long!')\n    .required('required!'),\n  email: Yup.string().email('invalid email').required('required!'),\n  password: Yup.string()\n\n    .min(6, 'password must contain at least 6 symbols!')\n    .required('required!'),\n});\n\nexport const LoginSchema = Yup.object().shape({\n  email: Yup.string().email('invalid email').required('required!'),\n  password: Yup.string()\n\n    .min(6, 'password must contain at least 6 symbols!')\n    .required('required!'),\n});\n\nexport const AddContactsSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'too short!')\n    .max(70, 'too long!')\n    .required('required!'),\n  number: Yup.string().required('required!'),\n  email: Yup.string().email(),\n  favorite: Yup.boolean(),\n});\n\nexport const EditContactsSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'too short!').max(70, 'too long!'),\n  number: Yup.string(),\n  email: Yup.string().email(),\n  favorite: Yup.boolean(),\n});\n","import { GeneralForm } from '../GeneralForm';\n\nexport const RegisterForm = () => {\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  return (\n    <GeneralForm type=\"registration\" initialValuesRegister={initialValues} />\n  );\n};\n","import { useSelector } from 'react-redux';\n\nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nimport { RegisterForm } from '../components/Forms/RegisterForm/RegisterForm';\nimport { Loader } from '../components/Loader/Loader';\n\nconst RegisterPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return <>{isLoading ? <Loader /> : <RegisterForm />}</>;\n};\n\nexport default RegisterPage;\n","export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectIsError = state => state.contacts.error;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","MainContentWrap","_templateObject2","EyeBtn","button","EyeButton","_ref","isShowedPassword","onClick","_jsx","type","children","BsEyeSlash","style","fill","size","BsEye","Notiflix","init","width","position","borderRadius","fontSize","fontFamily","fontAwesomeIconSize","success","background","textColor","warning","GeneralForm","initialValuesLogin","initialValuesRegister","setIsShowedPassword","useState","dispatch","useDispatch","_jsxs","ContentWrap","FormTitle","Formik","initialValues","validationSchema","RegisterSchema","LoginSchema","onSubmit","handleSubmit","e","_ref2","resetForm","registerUser","loginUser","FormWrap","InputWrap","InputLabel","htmlFor","Input","id","name","placeholder","ErrorMessage","component","toggleShowPassword","FormBtn","Form","_templateObject3","label","_templateObject4","Field","_templateObject5","_templateObject6","h3","_templateObject7","LoaderContainer","Loader","ThreeDots","color","Yup","shape","min","max","required","email","password","AddContactsSchema","number","favorite","EditContactsSchema","RegisterForm","RegisterPage","isLoading","useSelector","selectIsLoading","_Fragment","selectContacts","state","contacts"],"sourceRoot":""}